{
  "_args": [
    [
      {
        "raw": "another-json-schema@^3.6.0",
        "scope": null,
        "escapedName": "another-json-schema",
        "name": "another-json-schema",
        "rawSpec": "^3.6.0",
        "spec": ">=3.6.0 <4.0.0",
        "type": "range"
      },
      "D:\\inventory\\node_modules\\mongolass"
    ]
  ],
  "_from": "another-json-schema@>=3.6.0 <4.0.0",
  "_id": "another-json-schema@3.6.1",
  "_inCache": true,
  "_location": "/another-json-schema",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/another-json-schema_3.6.1_1528079881464_0.9891378801437714"
  },
  "_npmUser": {
    "name": "nswbmw",
    "email": "nswbmw1992@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "bson": "1.0.9",
    "require_optional": "1.0.1",
    "saslprep": "1.0.0"
  },
  "_requested": {
    "raw": "another-json-schema@^3.6.0",
    "scope": null,
    "escapedName": "another-json-schema",
    "name": "another-json-schema",
    "rawSpec": "^3.6.0",
    "spec": ">=3.6.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mongolass"
  ],
  "_resolved": "https://registry.npmjs.org/another-json-schema/-/another-json-schema-3.6.1.tgz",
  "_shasum": "0ebe5210a83bc550be55f4c1f9d91c27773ee897",
  "_shrinkwrap": null,
  "_spec": "another-json-schema@^3.6.0",
  "_where": "D:\\inventory\\node_modules\\mongolass",
  "bugs": {
    "url": "https://github.com/nswbmw/another-json-schema/issues"
  },
  "dependencies": {
    "mongodb": "3.1.0-beta4",
    "validator": "10.2.0"
  },
  "description": "Another JSON Schema, simple & flexible & intuitive.",
  "devDependencies": {
    "eslint-config-standard": "11.0.0-beta.0",
    "eslint-plugin-import": "2.8.0",
    "eslint-plugin-node": "5.2.1",
    "eslint-plugin-promise": "3.6.0",
    "eslint-plugin-standard": "3.0.1",
    "intelli-espower-loader": "1.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^4.1.0",
    "power-assert": "1.4.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-s+umj6PgzqjSjTwhVtBEopbIvOLwUbLxPKvKohYH+J7bXnInA76qsAeOrm8tRxsvHc6Dqi2JoSseI3obUmjxhA==",
    "shasum": "0ebe5210a83bc550be55f4c1f9d91c27773ee897",
    "tarball": "https://registry.npmjs.org/another-json-schema/-/another-json-schema-3.6.1.tgz",
    "fileCount": 13,
    "unpackedSize": 52249,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbFKYKCRA9TVsSAnZWagAAP2sP/joYoORaliBJC8QTOZ7G\nUOJggJM2YRZuVKJt0jDdy64a08xR/OC2pCeoBWJ56EfABynveKiZzWIrWQyR\ngZR2/0JE+u617CT2hVbq3jMAfq5EEdlbGZTuNonYmzK7B93ctgfxMxDmlsw/\nzjPBiqOSj1fFfCiC+S5vgts/gEPHYcyo2dITLmripLX7hGkgTMZfcc3ND6Pf\nXufUYEz8IhxaE3adEWvq0eesFtp7r0sfKmcJNXnWbmY0lsRi3DxvYKw3vLyV\nGu1KO4Qxnu56Z0/52ecGV6YGmV26z8CtElMBzJk2DgKuoYxCv/OOJeVyv7df\nyTeKv4m0bs9KZMyb6Xwrjx3dfxH8mHXt7H/SgBRsLfgBOaQQLVfwNkFSwOIv\nVMMJg6KZJVyB+j7j9otHY9g7mT5sicQkKW/nCoVyV1cIBBfJrHWLS0LX0Mq8\n2lpfQB5gTheQ3KtCs98R9lyUHz/I4Q39ZjARM5kp4RU6sK6lVbp/ziu14/2J\nntMAe9BBY7hPBkzrIcSor8j56zIIyStodo0ay+1JrNhj4uwFHMSYKci2Hfao\n9YkfXPvhMGgkDUKMewxllYOj7PHApO4Fr5t2WJzxLbXdDM9vkS82OP6Sqgjn\nBfFnu8REoYWwESfPoJrpL20PDAtaQIyxu0u/6AzcLHKwwlPnzTI8+jzZ3olf\nIvwn\r\n=zZ4F\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "d651f7e953b3deb2046fc0b9ae67c3cfbfd98be9",
  "homepage": "https://github.com/nswbmw/another-json-schema#readme",
  "keywords": [
    "json",
    "schema",
    "json-schema",
    "validate",
    "validator",
    "json-validate",
    "json-validator"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "nswbmw",
      "email": "gxqzk@126.com"
    }
  ],
  "name": "another-json-schema",
  "optionalDependencies": {},
  "readme": "### another-json-schema\n\nAnother JSON Schema, simple & flexible & intuitive.\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n### Install\n\n```sh\n$ npm i another-json-schema --save\n```\n\n### Usage\n\n### Simple\n\n```js\nconst AJS = require('another-json-schema')\n\nconst userSchema = AJS('userSchema', {\n  name: { type: 'string', required: true },\n  age: { type: 'number', gte: 18 },\n  gender: { type: 'string', enum: ['male', 'female'], default: 'male' }\n})\n\n// test `required`\nconsole.log(userSchema.validate({ age: 18 }))\n/*\n{ valid: false,\n  error:\n   { Error: ($.name: undefined) ✖ (required: true)\n     validator: 'required',\n     actual: undefined,\n     expected: { type: 'string', required: true },\n     path: '$.name',\n     schema: 'userSchema' },\n  result: { age: 18 } }\n*/\n\n// test `default`\nconst data = { name: 'nswbmw', age: 18 }\nconsole.log(userSchema.validate(data))\n/*\n{ valid: true,\n  error: null,\n  result: { name: 'nswbmw', age: 18, gender: 'male' } }\n*/\nconsole.log(data)\n// { name: 'nswbmw', age: 18, gender: 'male' }\n\n// test `enum`\nconsole.log(userSchema.validate({ name: 'nswbmw', age: 18, gender: 'lalala' }))\n/*\n{ valid: false,\n  error:\n   { Error: ($.gender: \"lalala\") ✖ (enum: male,female)\n     validator: 'enum',\n     actual: 'lalala',\n     expected: { type: 'string', enum: ['male', 'female'], default: 'male' },\n     path: '$.gender',\n     schema: 'userSchema' },\n  result: { name: 'nswbmw', age: 18, gender: 'lalala' } }\n*/\n\n// test `gte`\nconsole.log(userSchema.validate({ name: 'nswbmw', age: 17 }))\n/*\n{ valid: false,\n  error:\n   { Error: ($.age: 17) ✖ (gte: 18)\n     validator: 'gte',\n     actual: 17,\n     expected: { type: 'number', gte: 18 },\n     path: '$.age',\n     schema: 'userSchema' },\n  result: { name: 'nswbmw', age: 17 } }\n*/\n```\n\n### Nested\n\n```js\nconst AJS = require('another-json-schema')\n\nconst userSchema = AJS('userSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/, required: true },\n  name: { type: 'string' },\n  age: { type: 'number', gte: 18 },\n  gender: { type: 'string', enum: ['male', 'female'] }\n})\n\nconst commentSchema = AJS('commentSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/, required: true },\n  user: userSchema,\n  content: { type: 'string' }\n})\n\nconst postSchema = AJS('postSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/, required: true },\n  author: userSchema,\n  content: { type: 'string' },\n  comments: [commentSchema]\n})\n\nconst post = {\n  _id: 'post11111111111111111111',\n  author: {\n    _id: 'user11111111111111111111',\n    name: 'nswbmw',\n    age: 100,\n    gender: 'male',\n    pet: 'cat'\n  },\n  content: 'lalala',\n  comments: [{\n    _id: 'comment11111111111111111',\n    user: {\n      _id: 'wrong_id',\n      name: 'user1',\n      age: 100,\n      gender: 'male'\n    },\n    content: 'sofa'\n  }]\n}\n\nconsole.log(postSchema.validate(post))\n/*\n{ valid: false,\n  error:\n   { [Error: ($.comments[].user._id: \"wrong_id\") ✖ (pattern: /^[0-9a-z]{24}$/)]\n     validator: 'pattern',\n     actual: 'wrong_id',\n     expected: { type: 'string', pattern: /^[0-9a-z]{24}$/, required: true },\n     path: '$.comments[].user._id',\n     schema: 'userSchema' },\n  result:\n   { _id: 'post11111111111111111111',\n     author:\n      { _id: 'user11111111111111111111',\n        name: 'nswbmw',\n        age: 100,\n        gender: 'male' },\n     content: 'lalala',\n     comments: [ [Object] ] } }\n*/\n```\n\n### Custom Error Message\n\n```js\nconst AJS = require('another-json-schema')\n\nconst userSchema = AJS('userSchema', {\n  name: { type: 'string', required: true },\n  age: {\n    type: 'number',\n    gte: 18,\n    _customErrorMsg: {\n      gte: '您未满 18 岁'\n    }\n  }\n})\n\n// test `_customErrorMsg`\nconsole.log(userSchema.validate({\n  name: 'nswbmw',\n  age: 17\n}))\n/*\n{ valid: false,\n  error:\n   { Error: 您未满 18 岁\n     validator: 'gte',\n     path: '$.age',\n     actual: 17,\n     expected: { type: 'number', gte: 18, _customErrorMsg: [Object] },\n     schema: 'userSchema' },\n  result: { name: 'nswbmw', age: 17 } }\n*/\n```\n\n\n### Register validator\n\n```js\nconst AJS = require('another-json-schema')\n\nAJS.register('adult', function (actual, expected, key, parent) {\n  return expected ? (actual > 18) : (actual <= 18)\n})\nconst adultSchema = AJS('adultSchema', { type: 'number', adult: true })\n\nconsole.log(adultSchema.validate(19))\n// { valid: true, error: null, result: 19 }\nconsole.log(adultSchema.validate(17))\n/*\n{ valid: false,\n  error:\n   { Error: ($: 17) ✖ (adult: true)\n     validator: 'adult',\n     actual: 17,\n     expected: { type: 'number', adult: true },\n     path: '$',\n     schema: 'adultSchema' },\n  result: 17 }\n*/\n```\n\n### Custom type validate function\n\nCustom ObjectId validator, check whether ObjectId then wrap `_id` string to ObjectId.\n\n```js\nconst AJS = require('another-json-schema')\nconst validator = require('validator')\nconst toObjectId = require('mongodb').ObjectId\n\nfunction ObjectId(actual, key, parent) {\n  if (!actual || !validator.isMongoId(actual.toString())) {\n    return false\n  }\n  parent[key] = toObjectId(actual)\n  return true\n}\n\nconst postSchema = AJS('postSchema', {\n  commentIds: [{ type: ObjectId }]\n})\n\nconst user = {\n  commentIds: [\n    '111111111111111111111111',\n    '222222222222222222222222'\n  ]\n}\n\nconsole.log(postSchema.validate(user))\n/*\n{ valid: true,\n  error: null,\n  result: { commentIds: [ 111111111111111111111111, 222222222222222222222222 ] } }\n*/\n\n//validate specific field\nconsole.log(postSchema._children.commentIds.validate('lalala'))\n/*\n{ valid: false,\n  error:\n   { Error: ($.commentIds[]: \"lalala\") ✖ (type: ObjectId)\n     validator: 'type',\n     path: '$.commentIds[]',\n     actual: 'lalala',\n     expected: [ [Object] ],\n     schema: 'postSchema' },\n  result: 'lalala' }\n*/\n```\n\n### Internal type validator\n\n- 'string'\n- 'number'\n- 'boolean'\n- AJS.Types.ObjectId\n- AJS.Types.String\n- AJS.Types.Number\n- AJS.Types.Date\n- AJS.Types.Buffer\n- AJS.Types.Boolean\n- AJS.Types.Mixed\n\n**What's difference between `number` and `Mongolass.Types.Number` ?**\n`number` only check type, `Mongolass.Types.Number` will try to convert value to a number, if failed then throw error.\n\n```js\nconst AJS = require('/Users/nswbmw/work/GitHub/Node.js/another-json-schema')\n\nconst postSchema = AJS('postSchema', {\n  commentIds: [{ type: AJS.Types.ObjectId }]\n})\n\nconst user = {\n  commentIds: [\n    '111111111111111111111111',\n    '222222222222222222222222'\n  ]\n}\n\nconsole.log(postSchema.validate(user))\n/*\n{ valid: true,\n  error: null,\n  result: { commentIds: [ 111111111111111111111111, 222222222222222222222222 ] } }\n*/\n\n//validate specific field\nconsole.log(postSchema._children.commentIds.validate('lalala'))\n/*\n{ valid: false,\n  error:\n   { Error: ($.commentIds[]: \"lalala\") ✖ (type: ObjectId)\n     validator: 'type',\n     path: '$.commentIds[]',\n     actual: 'lalala',\n     expected: [ [Object] ],\n     schema: 'postSchema' },\n  result: 'lalala' }\n*/\n```\n\n#### Ignore validator\n\n```js\nconst AJS = require('another-json-schema')\n\nconst userSchema = AJS('userSchema', {\n  _id: { type: 'number', range: [1, 100] }\n})\n\nconst user = {\n  _id: 0\n}\n\nconsole.log(userSchema.validate(user))\n/*\n{ valid: false,\n  error:\n   { Error: ($._id: 0) ✖ (range: 1,100)\n     validator: 'range',\n     actual: 0,\n     expected: { type: 'number', range: [Array] },\n     path: '$._id',\n     schema: 'userSchema' },\n  result: { _id: 0 } }\n*/\nconsole.log(userSchema.validate(user, { range: false }))\n// { valid: true, error: null, result: { _id: 0 } }\n```\n\n**NB**: `type` validator cannot ignore by passing `false`.\n\n### API\n\n#### AJS([name], schema)\n\nConstructor.\n\n#### AJS.register(name, fn)\n\nRegister a validator. eg:\n\n```js\nAJS.register('adult', function (actual, expected, key, parent) {\n  return expected ? (actual > 18) : (actual <= 18)\n})\n```\n\n#### ajs.compile([name], schema)\n\nCompile a schema. The following two ways are the same:\n\n```js\nconst userSchema = AJS('userSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/ },\n  name: { type: 'string' },\n  age: { type: 'number', gte: 18 },\n  gender: { type: 'string', enum: ['male', 'female'] }\n})\n```\n\n```js\nconst newSchema = new AJS()\nconst userSchema = newSchema.compile('userSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/ },\n  name: { type: 'string' },\n  age: { type: 'number', gte: 18 },\n  gender: { type: 'string', enum: ['male', 'female'] }\n})\n```\n\n#### compiledSchema.validate(data, [opts])\n\nUse the compiled validator to validate an object. it will modify the original object and return it:\n\n- valid: {Boolean} wether a valid object\n- error: {Error|null}\n  - message: error message, eg: `($.comments[].user._id: \"wrong_id\") ✖ (pattern: /^[0-9a-z]{24}$/)`\n  - validator: validator name, eg: `pattern`,\n  - actual: actual value, eg: `wrong_id`,\n  - expected: expected schema, eg: `{ type: 'string', pattern: /^[0-9a-z]{24}$/ }`,\n  - path: path in object, eg: `$.comments[].user._id`,\n  - schema: schema name, eg: `userSchema`\n  - originError: original error thrown from validator\n- result: {Any}\n\nopts:\n\n- additionalProperties: {Boolean} if true, retain the original field. default `false`\n- ignoreNodeType: {Boolean} if true, ignore check node type, like: `[]`. default: `false`\n- gt, gte, lt, lte ...: {Boolean} if false, will not execute this validator.\n\n### Built-in validators\n\n- type\n- eq|equal\n- gt\n- gte\n- lt\n- lte\n- range\n- enum\n- pattern\n- default\n- required\n\n### More examples\n\nsee [test](./test).\n\n### Test\n\n```sh\n$ npm test (coverage 100%)\n```\n\n### License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/another-json-schema.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/another-json-schema\n[travis-image]: https://img.shields.io/travis/nswbmw/another-json-schema.svg?style=flat-square\n[travis-url]: https://travis-ci.org/nswbmw/another-json-schema\n[david-image]: http://img.shields.io/david/nswbmw/another-json-schema.svg?style=flat-square\n[david-url]: https://david-dm.org/nswbmw/another-json-schema\n[license-image]: http://img.shields.io/npm/l/another-json-schema.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/another-json-schema.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/another-json-schema\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nswbmw/another-json-schema.git"
  },
  "scripts": {
    "test": "istanbul cover ./node_modules/.bin/_mocha -r ./node_modules/intelli-espower-loader test --timeout=10000"
  },
  "version": "3.6.1"
}
